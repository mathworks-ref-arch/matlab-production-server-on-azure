{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "Server VM Instance Size": {
          "defaultValue": "Standard_D4s_v3",
          "type": "String",
          "metadata": {
              "description": "Each VM instance will run multiple workers. Select a VM size that is appropriate for your needs. It is recommended that you choose a VM size where the number of cores on your VM match the number of workers per VM you plan on using."
          }
      },
      "dashboardVMSize": {
          "defaultValue": "Standard_D1_v2",
          "type": "String",
          "metadata": {
              "description": "Size of the server dashboard VM. The dashboard manages server settings and deployed applications. Since this VM does not perform any significant computation, a smaller size is recommended."
          }
      },
      "instanceCount": {
          "defaultValue": 1,
          "minValue": 1,
          "maxValue": 24,
          "type": "Int",
          "metadata": {
              "description": "Number of VM instances."
          }
      },
      "adminUsername": {
          "type": "String",
          "metadata": {
              "description": "Administrator username on all VMs."
          }
      },
      "adminPassword": {
          "type": "SecureString",
          "metadata": {
              "description": "Administrator password on all VMs."
          }
      },
      "Allow connections from": {
          "type": "String",
          "metadata": {
              "description": "Specify the range of IP addresses in CIDR notation which will be allowed to use the solution. For example: 192.168.1.0/24. This can be a comma-separated list of CIDR ranges (no spaces), i.e. 192.168.1.0/24,10.0.0.0/8,172.16.0.0/16."
          }
      },
      "CreateAzureRedisCache": {
          "defaultValue": "No",
          "allowedValues": [
              "Yes",
              "No"
          ],
          "type": "String",
          "metadata": {
              "description": "Specify whether you want to create an Azure Redis Cache that lets you use the data caching functionality on the server."
          }
      },
      "UsePublicIPAddresses": {
          "defaultValue": "Yes",
          "allowedValues": [
              "Yes",
              "No"
          ],
          "type": "String",
          "metadata": {
              "description": "Specify whether you want to use public IP addresses and make your solution available over the Internet."
          }
      },
      "Platform": {
          "defaultValue": "Linux",
          "allowedValues": [
              "Windows",
              "Linux"
          ],
          "type": "String",
          "metadata": {
              "description": "Select the operating system for the server."
          }
      },
      "NewOrExistingVirtualNetwork": {
          "defaultValue": "new",
          "allowedValues": [
              "new",
              "existing"
          ],
          "type": "String",
          "metadata": {
              "description": "Specify whether to create a new virtual network or use an existing one."
          }
      },
      "VirtualNetworkName": {
          "defaultValue": "mps-network",
          "type": "String",
          "metadata": {
              "description": "Name of your existing virtual network where you want to deploy this solution."
          }
      },
      "Subnet1": {
          "defaultValue": "default",
          "type": "String",
          "metadata": {
              "description": "Name of the subnet that will host the dashboard and other resources."
          }
      },
      "Subnet2": {
          "defaultValue": "appGwSubnet",
          "type": "String",
          "metadata": {
              "description": "Name of the subnet that will host the application gateway."
          }
      },
      "VirtualNetworkCIDRRange": {
          "defaultValue": "10.0.0.0/16",
          "type": "String",
          "metadata": {
              "description": "CIDR range of the virtual network."
          }
      },
      "Subnet1CIDRRange": {
          "defaultValue": "10.0.0.0/24",
          "type": "String",
          "metadata": {
              "description": "CIDR range of the first subnet in the virtual network."
          }
      },
      "Subnet2CIDRRange": {
          "defaultValue": "10.0.1.0/24",
          "type": "String",
          "metadata": {
              "description": "CIDR range of the second subnet in the virtual network."
          }
      },
      "AvailableSubnet2IPAddress": {
          "defaultValue": "10.0.1.4",
          "type": "String",
          "metadata": {
              "description": "Specify an unused IP address from Subnet 2. This IP address serves as the private IP of the Application Gateway."
          }
      },
      "ResourceGroupNameOfVirtualNetwork": {
          "defaultValue": "[resourceGroup().name]",
          "type": "String",
          "metadata": {
              "description": "Specify the resource group name of the virtual network."
          }
      },
      "DeployNetworkLicenseManagerforMATLAB": {
          "defaultValue": "Yes",
          "allowedValues": [
              "Yes",
              "No"
          ],
          "type": "String",
          "metadata": {
              "description": "Specify whether you want to deploy the Network License Manager for MATLAB."
          }
      },
      "CertificateInputType": {
          "defaultValue": "KeyVault",
          "allowedValues": [
              "KeyVault",
              "Base64-encoded PFX Certificate"
          ],
          "type": "String",
          "metadata": {
              "description": "Select if the Application Gateway will use an SSL certificate from the KeyVault or a base64-encoded PFX certificate string. If you select \"KeyVault\", enter values for \"ManagedIdentityResourceIDForKeyVault\" and \"KeyVaultCertificateSecretID\". If you select \"Base64-encoded PFX Certificate\", enter values for \"Base64EncodedPFXCertificateData\" and \"PasswordForBase64EncodedPFXCertificate\"."
          }
      },
      "KeyVaultCertificateSecretID": {
          "defaultValue": "",
          "type": "SecureString",
          "metadata": {
              "description": "Secret ID of SSL certificate present in Key Vault. Required if \"Certificate Input Type\" is \"KeyVault\"."
          }
      },
      "ManagedIdentityResourceIDForKeyVault": {
          "defaultValue": "",
          "type": "String",
          "metadata": {
              "description": "Resource ID of the managed identity that has permission to access Key Vault. Required if \"Certificate Input Type\" is \"KeyVault\"."
          }
      },
      "Base64EncodedPFXCertificateData": {
          "defaultValue": "",
          "type": "String",
          "metadata": {
              "description": "Base64-encoded SSL certificate string in PFX format. Required if \"Certificate Input Type\" is \"Base64-encoded PFX Certificate\"."
          }
      },
      "PasswordForBase64EncodedPFXCertificate": {
          "defaultValue": "",
          "type": "SecureString",
          "metadata": {
              "description": "Password for Base64-encoded SSL certificate. Required if \"Certificate Input Type\" is \"Base64-encoded PFX Certificate\"."
          }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources. This is automatically set to the resource group location. Do not change."
        }
      }
  },
  "variables": {
      "ManagedIdentityResourceIDForKeyVault": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
              "[parameters('ManagedIdentityResourceIDForKeyVault')]": {}
          }
      },
      "AppGatewaySize": "Standard_v2",
      "AppGatewayCount": 1,
      "mpsDNSName": "[concat('mps',uniqueString( resourceGroup().id))]",
      "storageAccountName": "[concat('serverlog',uniqueString( resourceGroup().id))]",
      "storageAccountType": "Standard_LRS",
      "storagePrivateEndpointName": "storagePrivateEndpoint",
      "fileStorageDnsZone": "[concat('privatelink.file.', environment().suffixes.storage)]",
      "storagePrivateEndpointDnsGroupName": "[format('{0}/mwStorageDnsZoneGroup', variables('storagePrivateEndpointName'))]",
      "vmssName": "vmss1",
      "namingInfix": "[toLower(substring(concat(variables('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
      "addressPrefix": "[parameters('VirtualNetworkCIDRRange')]",
      "subnetPrefix": "[parameters('Subnet1CIDRRange')]",
      "virtualNetworkName": "[parameters('VirtualNetworkName')]",
      "subnetName": "[parameters('Subnet1')]",
      "subnetRef": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),variables('subnetName'))]",
      "nicName": "[concat(variables('namingInfix'), 'nic')]",
      "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
      "allowedIpArray": "[split(parameters('Allow connections from'), ',')]",
      "ResourceGroupNameOfVirtualNetwork": "[parameters('ResourceGroupNameOfVirtualNetwork')]",
      "virtualNetworkID": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'), 'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
      "appGwPublicIPAddressName": "[concat(variables('namingInfix'), '-pip')]",
      "appGwName": "[concat(variables('namingInfix'), '-agw')]",
      "appGwPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIPAddressName'))]",
      "appGwSubnetName": "[parameters('Subnet2')]",
      "appGwSubnetPrefix": "[parameters('Subnet2CIDRRange')]",
      "appGwSubnetID": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),variables('appGwSubnetName'))]",
      "backendCertData": "MIIB2DCCAX8CFFvkwj8cUBb+KNQffgdLa+w7BSu+MAoGCCqGSM49BAMCMG8xCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1NYXNzYWNodXNldHRzMQ8wDQYDVQQHDAZuYXRpY2sxEjAQBgNVBAoMCU1hdGhXb3JrczELMAkGA1UECwwCREMxFjAUBgNVBAMMDW1hdGh3b3Jrcy5jb20wHhcNMjIxMjE1MDIzMjA4WhcNMzIxMjEyMDIzMjA4WjBvMQswCQYDVQQGEwJVUzEWMBQGA1UECAwNTWFzc2FjaHVzZXR0czEPMA0GA1UEBwwGbmF0aWNrMRIwEAYDVQQKDAlNYXRoV29ya3MxCzAJBgNVBAsMAkRDMRYwFAYDVQQDDA1tYXRod29ya3MuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESCAyt8cSVzBBX5/9WZf3YolAo20yXbQi2hoPNp+yAQ41P0Z4IOzdWoVVHwGXSJly7w0GGfuvPUqfpKZgyFwimjAKBggqhkjOPQQDAgNHADBEAiBBGDad5/W52Ed5YVdvQv8wzhTTobDVDWk2twYdc1waWQIgClqMtAKY5zjkOXfXUGhL1SoIWxJTj4cGqFCw/MAkfrc=",
      "mpsHttpPortVar": 9910,
      "mpsFrontEndPort": 445,
      "appGwBePoolName": "[concat(variables('namingInfix'), 'appGwBepool')]",
      "networkSecurityGroupName": "[concat(variables('namingInfix'), '-rdp-nsg')]",
      "publicIPAddressNameMachine": "admindashboard-public-ip",
      "redisCacheName": "[concat(variables('namingInfix'), 'redis')]",
      "redisenableNonSslPort": true,
      "redisCacheCapacity": 1,
      "redisCacheFamily": "C",
      "redisCacheSKU": "Standard",
      "privateEndpointName": "redisPrivateEndpoint",
      "privateDnsZoneName": "privatelink.redis.cache.windows.net",
      "privateEndpointDnsGroupName": "[format('{0}/mydnsgroupname', variables('privateEndpointName'))]",
      "appGWprivateIP": "[parameters('AvailableSubnet2IPAddress')]",
      "virtualNetworkNewOrExisting": "[parameters('NewOrExistingVirtualNetwork')]",
      "licservernicName": "admindashboard-nic",
      "vmName": "admindashboard",
      "publicIPprop1": {
          "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameMachine'))]"
      },
      "Platform": "[parameters('Platform')]",
      "WindowsSKUDisk1": "matlab-production-server-admin-vm-25a",
      "WindowsOfferDisk1": "matlab-production-server-payg-master",
      "WindowsSKUDisk2": "matlab-production-server-worker-windows-25a",
      "WindowsOfferDisk2": "matlab-production-server-byol-windows",
      "LinuxSKUDisk1": "[variables('WindowsSKUDisk1')]",
      "LinuxOfferDisk1": "[variables('WindowsOfferDisk1')]",
      "LinuxSKUDisk2": "matlab-production-server-worker-linux-25a",
      "LinuxOfferDisk2": "matlab-production-server-byol-linux",
      "WindowsDisk1Version": "latest",
      "WindowsDisk2Version": "latest",
      "LinuxDisk1Version": "[variables('WindowsDisk1Version')]",
      "LinuxDisk2Version": "latest",
      "windowsScriptURL": "[uri(variables('_artifactsLocation'), concat('scriptScaleSet.ps1', variables('_artifactsLocationSasToken')))]",
      "linuxScriptURL": "[uri(variables('_artifactsLocation'), concat('scriptScaleSet.sh', variables('_artifactsLocationSasToken')))]",
      "adminVMScriptURL": "[uri(variables('_artifactsLocation'), concat('initAdminVM.sh', variables('_artifactsLocationSasToken')))]",
      "commandToExecuteWindows": "[concat('powershell -ExecutionPolicy Unrestricted -File scriptScaleSet.ps1 ' )]",
      "commandToExecuteLinux": "[concat('sudo ./scriptScaleSet.sh')]",
      "AppInsights-AppType": "Node.JS",
      "AppInsights-requestSource": "rest",
      "myAppInsightsInstanceName": "logs-apmservice",
      "workspaceName": "logs-workspace",
      "keyoperator": "[resourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
      "owner": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "offerType": "BYOL",
      "should-deploy-flex": "[parameters('DeployNetworkLicenseManagerforMATLAB')]",
      "flex-arm-template-link": "https://raw.githubusercontent.com/mathworks-ref-arch/license-manager-for-matlab-on-azure/refs/heads/master/releases/v1/latest/azuredeploy.json",
      "flex-parameters": {
          "instanceType": {
              "value": "Standard_D2s_v3"
          },
          "clientIPAddressList": {
              "value": "[parameters('Allow connections from')]"
          },
          "adminUsername": {
              "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
              "value": "[parameters('adminPassword')]"
          },
          "existingVnetResourceID": {
              "value": "[variables('virtualNetworkID')]"
          },
          "existingSubnetName": {
              "value": "[variables('subnetName')]"
          },
          "createPublicIPAddress": {
              "value": "[parameters('UsePublicIPAddresses')]"
          }
      },
      "_artifactsLocation": "https://raw.githubusercontent.com/mathworks-ref-arch/matlab-production-server-on-azure/refs/heads/staging/releases/R2025a/scripts/",
      "_artifactsLocationSasToken": ""
  },
  "resources": [
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2024-03-01",
          "name": "flex-lm-server",
          "dependsOn": [
              "[resourceId('Microsoft.Network/networkInterfaces/',variables('licservernicName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('flex-arm-template-link')]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": "[variables('flex-parameters')]"
          },
          "condition": "[equals(variables('should-deploy-flex'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2024-03-01",
          "name": "[variables('networkSecurityGroupName')]",
          "location": "[parameters('location')]",
          "tags": {
              "Description": "Network Security Group to control access to resources"
          },
          "properties": {
              "securityRules": [
                  {
                      "name": "appgw-https",
                      "properties": {
                          "priority": 1000,
                          "sourceAddressPrefixes": "[variables('allowedIpArray')]",
                          "protocol": "Tcp",
                          "destinationPortRange": "443",
                          "access": "Allow",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "[parameters('Subnet2CIDRRange')]"
                      }
                  },
                  {
                      "name": "nlm-https",
                      "properties": {
                          "priority": 1001,
                          "sourceAddressPrefixes": "[variables('allowedIpArray')]",
                          "protocol": "Tcp",
                          "destinationPortRange": "443",
                          "access": "Allow",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "[parameters('Subnet1CIDRRange')]"
                      }
                  },
                  {
                      "name": "rdp",
                      "properties": {
                          "priority": 1002,
                          "sourceAddressPrefixes": "[variables('allowedIpArray')]",
                          "protocol": "Tcp",
                          "destinationPortRange": "3389",
                          "access": "Allow",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*"
                      }
                  },
                  {
                      "name": "ssh",
                      "properties": {
                          "priority": 1003,
                          "sourceAddressPrefixes": "[variables('allowedIpArray')]",
                          "protocol": "Tcp",
                          "destinationPortRange": "22",
                          "access": "Allow",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*"
                      }
                  },
                  {
                      "name": "appgw-required-by-azure",
                      "properties": {
                          "priority": 1004,
                          "sourceAddressPrefix": "GatewayManager",
                          "protocol": "Tcp",
                          "destinationPortRange": "65200-65535",
                          "access": "Allow",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*"
                      }
                  }
              ]
          }
      },
      {
          "type": "Microsoft.Network/virtualNetworks",
          "apiVersion": "2024-03-01",
          "name": "[variables('virtualNetworkName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
          ],
          "tags": {
              "Description": "Virtual network for the MATLAB Production Server deployment"
          },
          "properties": {
              "addressSpace": {
                  "addressPrefixes": [
                      "[variables('addressPrefix')]"
                  ]
              },
              "subnets": [
                  {
                      "name": "[variables('subnetName')]",
                      "properties": {
                          "addressPrefix": "[variables('subnetPrefix')]",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                          },
                          "serviceEndpoints": [
                              {
                                  "service": "Microsoft.Storage",
                                  "locations": "[parameters('location')]"
                              }
                          ]
                      }
                  },
                  {
                      "name": "[variables('appGwSubnetName')]",
                      "properties": {
                          "addressPrefix": "[variables('appGwSubnetPrefix')]",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                          }
                      }
                  }
              ]
          },
          "condition": "[equals(variables('virtualNetworkNewOrExisting'), 'new')]"
      },
      {
          "type": "Microsoft.Network/publicIPAddresses",
          "apiVersion": "2024-03-01",
          "name": "[variables('publicIPAddressNameMachine')]",
          "location": "[parameters('location')]",
          "tags": {
              "Description": "Public IP Address of the MATLAB Production Server Dashboard"
          },
          "sku": {
              "name": "Standard"
          },
          "properties": {
              "publicIPAllocationMethod": "Static"
          },
          "condition": "[equals(parameters('UsePublicIPAddresses'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/networkInterfaces",
          "apiVersion": "2024-03-01",
          "name": "[variables('licservernicName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameMachine'))]",
              "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
              "[resourceId('Microsoft.Network/applicationGateways/', variables('appGwName'))]"
          ],
          "tags": {
              "Description": "Network Interface Card (NIC) for the Admin VM"
          },
          "properties": {
              "ipConfigurations": [
                  {
                      "name": "ipconfig1",
                      "properties": {
                          "privateIPAllocationMethod": "Dynamic",
                          "publicIPAddress": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'), variables('publicIPprop1'), json('null'))]",
                          "subnet": {
                              "id": "[variables('subnetRef')]"
                          },
                          "applicationGatewayBackendAddressPools": [
                              {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), 'dashboardbackend')]"
                              }
                          ]
                      }
                  }
              ],
              "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
          }
      },
      {
          "type": "Microsoft.Compute/virtualMachines",
          "apiVersion": "2024-03-01",
          "name": "[variables('vmName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/networkInterfaces/',variables('licservernicName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
              "[resourceId('Microsoft.Cache/Redis/',variables('redisCacheName'))]",
              "[resourceId('Microsoft.Storage/storageAccounts/',variables('storageAccountName'))]",
              "[resourceId('Microsoft.Insights/components', variables('myAppInsightsInstanceName'))]"
          ],
          "tags": {
              "Description": "Virtual machine running the Admin Dashboard"
          },
          "identity": {
              "type": "SystemAssigned"
          },
          "plan": {
              "name": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk1'),  variables('LinuxSKUDisk1'))]",
              "publisher": "mathworks-inc",
              "product": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk1'),  variables('LinuxOfferDisk1'))]"
          },
          "properties": {
              "hardwareProfile": {
                  "vmSize": "[parameters('dashboardVMSize')]"
              },
              "osProfile": {
                  "computerName": "[variables('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]"
              },
              "storageProfile": {
                  "imageReference": {
                      "publisher": "mathworks-inc",
                      "offer": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk1'),  variables('LinuxOfferDisk1'))]",
                      "sku": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk1'),  variables('LinuxSKUDisk1'))]",
                      "version": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsDisk1Version'),  variables('LinuxDisk1Version'))]"
                  },
                  "osDisk": {
                      "createOption": "FromImage",
                      "managedDisk": {
                          "storageAccountType": "Standard_LRS"
                      }
                  }
              },
              "networkProfile": {
                  "networkInterfaces": [
                      {
                          "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('licservernicName'))]"
                      }
                  ]
              }
          },
          "resources": [
              {
                  "type": "extensions",
                  "apiVersion": "2024-03-01",
                  "name": "config-app",
                  "location": "[parameters('location')]",
                  "dependsOn": [
                      "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
                  ],
                  "tags": {
                      "displayName": "config-app"
                  },
                  "properties": {
                      "publisher": "Microsoft.Azure.Extensions",
                      "type": "CustomScript",
                      "typeHandlerVersion": "2.0",
                      "autoUpgradeMinorVersion": true,
                      "settings": {
                          "skipDos2Unix": false,
                          "timestamp": 123456789
                      },
                      "protectedSettings": {
                          "commandToExecute": "[concat( 'sudo ./initAdminVM.sh ''', variables('storageAccountName'), ''' ''', 'mydbConnection', ''' ''', if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn), concat('https://', variables('appGWprivateIP'), ':444')), ''' ''', if(contains(reference(variables('subnetRef'), '2022-01-01'), 'addressPrefix'), reference(variables('subnetRef'), '2022-01-01').addressPrefix, first(reference(variables('subnetRef'), '2022-01-01').addressPrefixes)), ''' ''', 'Azure', ''' ''', variables('Platform'), ''' ''', reference(resourceId('Microsoft.Insights/components', variables('myAppInsightsInstanceName')), '2020-02-02').InstrumentationKey, ''' ''', resourceGroup().name, ''' ''', subscription().subscriptionId, ''' ''', parameters('adminUsername'), ''' ''', parameters('adminPassword'), ''' ''', variables('redisCacheName'), ''' ''', concat('https://', variables('appGWprivateIP'), ':444'), ''' ''', variables('offerType'), '''' )]",
                          "fileUris": [
                              "[variables('adminVMScriptURL')]"
                          ]
                      }
                  }
              }
          ]
      },
      {
          "type": "Microsoft.Network/publicIPAddresses",
          "apiVersion": "2024-03-01",
          "name": "[variables('appGwPublicIPAddressName')]",
          "location": "[parameters('location')]",
          "tags": {
              "Description": "Application Gateway public IP"
          },
          "sku": {
              "name": "Standard"
          },
          "properties": {
              "publicIPAllocationMethod": "Static",
              "dnsSettings": {
                  "domainNameLabel": "[variables('mpsDNSName')]"
              }
          }
      },
      {
          "type": "Microsoft.Network/applicationGateways",
          "apiVersion": "2024-03-01",
          "name": "[variables('appGwName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
              "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appGwPublicIPAddressName'))]"
          ],
          "tags": {
              "Description": "Application Gateway"
          },
          "identity": "[if(equals(parameters('CertificateInputType'), 'KeyVault'), variables('ManagedIdentityResourceIDForKeyVault'), json('null'))]",
          "properties": {
              "sku": {
                  "name": "[variables('AppGatewaySize')]",
                  "tier": "Standard_v2",
                  "capacity": "[variables('AppGatewayCount')]"
              },
              "sslCertificates": [
                  {
                      "name": "appGatewayFrontEndSslCert",
                      "properties": {
                          "keyVaultSecretId": "[if(equals(parameters('CertificateInputType'), 'KeyVault'), parameters('KeyVaultCertificateSecretID'), json('null'))]",
                          "data": "[if(equals(parameters('CertificateInputType'), 'Base64-encoded PFX Certificate'), parameters('Base64EncodedPFXCertificateData'), json('null'))]",
                          "password": "[if(equals(parameters('CertificateInputType'), 'Base64-encoded PFX Certificate'), parameters('PasswordForBase64EncodedPFXCertificate'), json('null'))]"
                      }
                  }
              ],
              "trustedRootCertificates": [
                  {
                      "properties": {
                          "data": "[variables('backendCertData')]"
                      },
                      "name": "backendRootCert"
                  }
              ],
              "gatewayIPConfigurations": [
                  {
                      "name": "appGwIpConfig",
                      "properties": {
                          "subnet": {
                              "id": "[variables('appGwSubnetID')]"
                          }
                      }
                  }
              ],
              "frontendIPConfigurations": [
                  {
                      "name": "appGwFrontendPublicIP",
                      "properties": {
                          "PublicIPAddress": {
                              "id": "[variables('appGwPublicIPAddressID')]"
                          }
                      }
                  },
                  {
                      "name": "appGwFrontendPrivateIP",
                      "properties": {
                          "privateIPAddress": "[variables('appGWprivateIP')]",
                          "privateIPAllocationMethod": "Static",
                          "subnet": {
                              "id": "[variables('appGwSubnetID')]"
                          }
                      }
                  }
              ],
              "frontendPorts": [
                  {
                      "name": "mpsHttpPort",
                      "properties": {
                          "Port": "[variables('mpsFrontEndPort')]"
                      }
                  },
                  {
                      "name": "mpsHttpPort2",
                      "properties": {
                          "Port": 444
                      }
                  },
                  {
                      "name": "dummyPort",
                      "properties": {
                          "Port": 449
                      }
                  },
                  {
                      "name": "port_445",
                      "properties": {
                          "port": 443
                      }
                  }
              ],
              "backendAddressPools": [
                  {
                      "name": "[variables('appGwBePoolName')]"
                  },
                  {
                      "name": "dashboardbackend",
                      "properties": {}
                  }
              ],
              "backendHttpSettingsCollection": [
                  {
                      "name": "appGwBackendMPSHttpSettings",
                      "properties": {
                          "Port": "[variables('mpsHttpPortVar')]",
                          "Protocol": "Http",
                          "requestTimeout": 300,
                          "CookieBasedAffinity": "Enabled",
                          "probe": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/probes',variables('appGwName'), 'mpsfileprobe')]"
                          }
                      }
                  },
                  {
                      "name": "dashboardbackend",
                      "properties": {
                          "port": 9090,
                          "protocol": "Https",
                          "cookieBasedAffinity": "Disabled",
                          "affinityCookieName": "ApplicationGatewayAffinity",
                          "requestTimeout": 300,
                          "probe": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/probes',variables('appGwName'), 'dashboardHealth')]"
                          },
                          "hostName": "www.myprodserver.com",
                          "trustedRootCertificates": [
                              {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/trustedRootCertificates',variables('appGwName'), 'backendRootCert')]"
                              }
                          ]
                      }
                  }
              ],
              "httpListeners": [
                  {
                      "name": "MPSGwHttpListener",
                      "properties": {
                          "FrontendIPConfiguration": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGwName') ,'appGwFrontendPublicIP')]"
                          },
                          "FrontendPort": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGwName'), 'mpsHttpPort')]"
                          },
                          "Protocol": "Https",
                          "SslCertificate": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'), 'appGatewayFrontEndSslCert')]"
                          }
                      }
                  },
                  {
                      "name": "MPSGwPrivateHttpListener",
                      "properties": {
                          "FrontendIPConfiguration": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPrivateIP')]"
                          },
                          "FrontendPort": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'mpsHttpPort2')]"
                          },
                          "Protocol": "Https",
                          "SslCertificate": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
                          }
                      }
                  },
                  {
                      "name": "MPSGwDummyHttpListener",
                      "properties": {
                          "FrontendIPConfiguration": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPrivateIP')]"
                          },
                          "FrontendPort": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'dummyPort')]"
                          },
                          "Protocol": "Https",
                          "SslCertificate": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
                          }
                      }
                  },
                  {
                      "name": "mainentrypoint",
                      "properties": {
                          "frontendIPConfiguration": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPublicIP')]"
                          },
                          "frontendPort": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'port_445')]"
                          },
                          "protocol": "Https",
                          "sslCertificate": {
                              "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
                          },
                          "requireServerNameIndication": false
                      }
                  }
              ],
              "urlPathMaps": [
                  {
                      "name": "mainpath",
                      "properties": {
                          "defaultBackendAddressPool": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), variables('appGwBePoolName'))]"
                          },
                          "defaultBackendHttpSettings": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',variables('appGwName'), 'appGwBackendMPSHttpSettings')]"
                          },
                          "pathRules": [
                              {
                                  "name": "dashboard",
                                  "properties": {
                                      "paths": [
                                          "/dashboard/*",
                                          "/dashboard"
                                      ],
                                      "backendAddressPool": {
                                          "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), 'dashboardbackend')]"
                                      },
                                      "backendHttpSettings": {
                                          "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',variables('appGwName'), 'dashboardbackend')]"
                                      }
                                  }
                              }
                          ]
                      }
                  }
              ],
              "requestRoutingRules": [
                  {
                      "name": "mainpathPrivate",
                      "properties": {
                          "ruleType": "PathBasedRouting",
                          "httpListener": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'MPSGwPrivateHttpListener')]"
                          },
                          "urlPathMap": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps',variables('appGwName'), 'mainpath')]"
                          },
                          "priority": 1
                      }
                  },
                  {
                      "name": "mainpath",
                      "properties": {
                          "ruleType": "PathBasedRouting",
                          "httpListener": {
                              "id": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'),resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'mainentrypoint'),  resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'MPSGwDummyHttpListener') )]"
                          },
                          "urlPathMap": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps',variables('appGwName'), 'mainpath')]"
                          },
                          "priority": 2
                      }
                  }
              ],
              "probes": [
                  {
                      "name": "mpsfileprobe",
                      "properties": {
                          "protocol": "Http",
                          "host": "127.0.0.1",
                          "path": "/~files/hello.html",
                          "interval": 30,
                          "timeout": 30,
                          "unhealthyThreshold": 3,
                          "match": {
                              "statusCodes": [
                                  "200-399"
                              ]
                          }
                      }
                  },
                  {
                      "name": "dashboardHealth",
                      "properties": {
                          "protocol": "Https",
                          "path": "/dashboard/index.html",
                          "interval": 30,
                          "timeout": 30,
                          "unhealthyThreshold": 3,
                          "pickHostNameFromBackendHttpSettings": true,
                          "minServers": 0,
                          "match": {
                              "statusCodes": [
                                  "200-399"
                              ]
                          }
                      }
                  }
              ]
          }
      },
      {
          "type": "Microsoft.Compute/virtualMachineScaleSets",
          "apiVersion": "2024-03-01",
          "name": "[variables('namingInfix')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
              "[resourceId('Microsoft.Network/applicationGateways/', variables('appGwName'))]"
          ],
          "tags": {
              "Description": "VM Scale set that controls how many instances are running"
          },
          "sku": {
              "name": "[parameters('Server VM Instance Size')]",
              "tier": "Standard",
              "capacity": "[parameters('instanceCount')]"
          },
          "identity": {
              "type": "SystemAssigned"
          },
          "plan": {
              "name": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk2'),  variables('LinuxSKUDisk2'))]",
              "publisher": "mathworks-inc",
              "product": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk2'),  variables('LinuxOfferDisk2'))]"
          },
          "properties": {
              "overprovision": "true",
              "upgradePolicy": {
                  "mode": "Manual"
              },
              "virtualMachineProfile": {
                  "storageProfile": {
                      "imageReference": {
                          "publisher": "mathworks-inc",
                          "offer": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk2'),  variables('LinuxOfferDisk2'))]",
                          "sku": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk2'),  variables('LinuxSKUDisk2'))]",
                          "version": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsDisk2Version'),  variables('LinuxDisk2Version'))]"
                      },
                      "osDisk": {
                          "createOption": "fromImage",
                          "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                          }
                      }
                  },
                  "osProfile": {
                      "computerNamePrefix": "[variables('namingInfix')]",
                      "adminUsername": "[parameters('adminUsername')]",
                      "adminPassword": "[parameters('adminPassword')]"
                  },
                  "networkProfile": {
                      "networkInterfaceConfigurations": [
                          {
                              "name": "[variables('nicName')]",
                              "properties": {
                                  "primary": true,
                                  "ipConfigurations": [
                                      {
                                          "name": "[variables('ipConfigName')]",
                                          "properties": {
                                              "subnet": {
                                                  "id": "[variables('subnetRef')]"
                                              },
                                              "ApplicationGatewayBackendAddressPools": [
                                                  {
                                                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), variables('appGwBePoolName'))]"
                                                  }
                                              ]
                                          }
                                      }
                                  ]
                              }
                          }
                      ]
                  },
                  "extensionProfile": {
                      "extensions": [
                          {
                              "name": "[concat(variables('vmssName'), 'SetEnvironmentVar')]",
                              "properties": {
                                  "publisher": "[if(equals(variables('Platform'), 'Windows'), 'Microsoft.Compute', 'Microsoft.Azure.Extensions')]",
                                  "forceUpdateTag": "1",
                                  "type": "[if(equals(variables('Platform'), 'Windows'), 'CustomScriptExtension', 'CustomScript')]",
                                  "typeHandlerVersion": "[if(equals(variables('Platform'), 'Windows'), '1.9', '2.0')]",
                                  "autoUpgradeMinorVersion": true,
                                  "settings": {
                                      "fileUris": [
                                          "[if(equals(variables('Platform'), 'Windows'), variables('windowsScriptURL'), variables('linuxScriptURL'))]"
                                      ]
                                  },
                                  "protectedSettings": {
                                      "commandToExecute": "[if(equals(variables('Platform'), 'Windows'), variables('commandToExecuteWindows'), variables('commandToExecuteLinux'))]"
                                  }
                              }
                          }
                      ]
                  }
              }
          }
      },
      {
          "type": "Microsoft.Storage/storageAccounts",
          "apiVersion": "2023-05-01",
          "name": "[variables('storageAccountName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
          ],
          "tags": {
              "Description": "Storage account that stores application and config files"
          },
          "sku": {
              "name": "[variables('storageAccountType')]"
          },
          "kind": "StorageV2",
          "properties": {
              "allowBlobPublicAccess": false,
              "minimumTlsVersion": "TLS1_2",
              "publicNetworkAccess": "[if(equals(parameters('usePublicIPAddresses'), 'Yes'), 'Enabled', 'Disabled')]",
              "networkAcls": {
                  "virtualNetworkRules": "[if(equals(parameters('usePublicIPAddresses'), 'Yes'), createArray(createObject('id', variables('subnetRef'))), createArray())]",
                  "ipRules": "[if(equals(parameters('usePublicIPAddresses'), 'Yes'), createArray(createObject('action', 'Allow', 'value', if(endsWith(variables('allowedIpArray')[0], '/32'), substring(variables('allowedIpArray')[0], 0, sub(length(variables('allowedIpArray')[0]), 3)), variables('allowedIpArray')[0]))), createArray())]",
                  "defaultAction": "Deny"
              }
          }
      },
      {
          "type": "Microsoft.Network/privateEndpoints",
          "apiVersion": "2024-03-01",
          "name": "[variables('storagePrivateEndpointName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {
              "subnet": {
                  "id": "[variables('subnetRef')]"
              },
              "privateLinkServiceConnections": [
                  {
                      "name": "[variables('storagePrivateEndpointName')]",
                      "properties": {
                          "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                          "groupIds": [
                              "file"
                          ]
                      }
                  }
              ]
          },
          "condition": "[equals(parameters('usePublicIPAddresses'), 'No')]"
      },
      {
          "type": "Microsoft.Network/privateDnsZones",
          "apiVersion": "2024-06-01",
          "name": "[variables('fileStorageDnsZone')]",
          "location": "global",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {},
          "condition": "[equals(parameters('usePublicIPAddresses'), 'No')]"
      },
      {
          "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
          "apiVersion": "2024-06-01",
          "name": "[format('{0}/{1}', variables('fileStorageDnsZone'), format('{0}-link', variables('fileStorageDnsZone')))]",
          "location": "global",
          "dependsOn": [
              "[resourceId('Microsoft.Network/privateDnsZones', variables('fileStorageDnsZone'))]",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {
              "registrationEnabled": false,
              "virtualNetwork": {
                  "id": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
              }
          },
          "condition": "[equals(parameters('usePublicIPAddresses'), 'No')]"
      },
      {
          "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
          "apiVersion": "2024-03-01",
          "name": "[variables('storagePrivateEndpointDnsGroupName')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/privateDnsZones', variables('fileStorageDnsZone'))]",
              "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointName'))]"
          ],
          "properties": {
              "privateDnsZoneConfigs": [
                  {
                      "name": "config1",
                      "properties": {
                          "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('fileStorageDnsZone'))]"
                      }
                  }
              ]
          },
          "condition": "[equals(parameters('usePublicIPAddresses'), 'No')]"
      },
      {
          "type": "Microsoft.Cache/Redis",
          "apiVersion": "2023-08-01",
          "name": "[variables('redisCacheName')]",
          "location": "[parameters('location')]",
          "tags": {
              "Description": "Azure Cache for Redis to store persistence data"
          },
          "properties": {
              "enableNonSslPort": "[variables('redisenableNonSslPort')]",
              "sku": {
                  "capacity": "[variables('redisCacheCapacity')]",
                  "family": "[variables('redisCacheFamily')]",
                  "name": "[variables('redisCacheSKU')]"
              }
          },
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/privateEndpoints",
          "apiVersion": "2024-03-01",
          "name": "[variables('privateEndpointName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {
              "subnet": {
                  "id": "[variables('subnetRef')]"
              },
              "privateLinkServiceConnections": [
                  {
                      "name": "[variables('privateEndpointName')]",
                      "properties": {
                          "privateLinkServiceId": "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]",
                          "groupIds": [
                              "redisCache"
                          ]
                      }
                  }
              ]
          },
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/privateDnsZones",
          "apiVersion": "2024-06-01",
          "name": "[variables('privateDnsZoneName')]",
          "location": "global",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {},
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
          "apiVersion": "2024-06-01",
          "name": "[format('{0}/{1}', variables('privateDnsZoneName'), format('{0}-link', variables('privateDnsZoneName')))]",
          "location": "global",
          "dependsOn": [
              "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
          ],
          "properties": {
              "registrationEnabled": false,
              "virtualNetwork": {
                  "id": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
              }
          },
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      },
      {
          "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
          "apiVersion": "2024-03-01",
          "name": "[variables('privateEndpointDnsGroupName')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
              "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
          ],
          "properties": {
              "privateDnsZoneConfigs": [
                  {
                      "name": "config1",
                      "properties": {
                          "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
                      }
                  }
              ]
          },
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      },
      {
          "type": "Microsoft.OperationalInsights/workspaces",
          "apiVersion": "2023-09-01",
          "name": "[variables('workspaceName')]",
          "location": "[parameters('location')]",
          "properties": {
              "sku": {
                  "name": "PerGB2018"
              }
          }
      },
      {
          "type": "Microsoft.Insights/Components",
          "apiVersion": "2020-02-02",
          "name": "[variables('myAppInsightsInstanceName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
          ],
          "tags": {
              "Description": "Application Insights instance that stores solution logs"
          },
          "properties": {
              "Application_Type": "[variables('AppInsights-AppType')]",
              "Flow_Type": "Redfield",
              "Request_Source": "[variables('AppInsights-requestSource')]",
              "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
          }
      },
      {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(resourceGroup().id, deployment().name,'12')]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('keyoperator')]",
              "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), '2023-09-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          },
          "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]"
      },
      {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(resourceGroup().id, deployment().name,'16')]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('keyoperator')]",
              "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix')), '2023-09-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          },
          "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]"
      },
      {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(resourceGroup().id, deployment().name,'22')]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('owner')]",
              "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), '2023-09-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          },
          "scope": "[concat('Microsoft.Cache/Redis', '/', variables('redisCacheName'))]",
          "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]"
      }
  ],
  "outputs": {
      "adminDashboardURL": {
          "type": "String",
          "value": "[uri(if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn, '/dashboard/admin'), concat('https://', variables('appGWprivateIP'), ':444/dashboard/admin')), '')]"
      },
      "managerAndAppAuthorDashboardURL": {
          "type": "String",
          "value": "[uri(if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn, '/dashboard'), concat('https://', variables('appGWprivateIP'), ':444/dashboard')), '')]"
      },
      "networkLicenseManagerURL": {
          "type": "String",
          "value": "[if(equals(variables('should-deploy-flex'), 'Yes'), reference('flex-lm-server').outputs.NetworkLicenseManagerAddress.value, 'none')]"
      },
      "MATLABExecutionEndpoint": {
          "type": "String",
          "value": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn), concat('https://', variables('appGWprivateIP'),':444'))]"
      }
  }
}