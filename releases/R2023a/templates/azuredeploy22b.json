{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location where the template will be deployed"
      }
    },
    "Server VM Instance Size": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3",
      "metadata": {
        "description": "Each VM instance will run multiple workers. Select a VM size that is appropriate for your needs. It is recommended that you choose a VM size where the number of cores on your VM match the number of workers per VM you plan on using."
      }
    },
    "dashboardVMSize": {
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "Size of the server dashboard VM. The dashboard manages server settings and deployed applications. Since this VM does not perform any significant computation, a smaller size is recommended."
      }
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of VM instances."
      },
      "maxValue": 24,
      "minValue": 1
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Administrator username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password on all VMs."
      }
    },
    "Allow connections from": {
      "type": "string",
      "metadata": {
        "description": "String identifying the client CIDR or IP range which will be allowed to use the solution."
      }
    },
    "CreateAzureRedisCache": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether you want to create an Azure Redis Cache that lets you use the data caching functionality on the server."
      }
    },
    "UsePublicIPAddresses": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether you want to use public IP addresses and make your solution available over the Internet."
      }
    },
    "Platform": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": ["Windows", "Linux"],
      "metadata": {
        "description": "Select the operating system for the server."
      }
    },
    "NewOrExistingVirtualNetwork": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": ["new", "existing"],
      "metadata": {
        "description": "Specify whether to create a new virtual network or use an existing one."
      }
    },
    "VirtualNetworkName": {
      "type": "string",
      "defaultValue": "mps-network",
      "metadata": {
        "description": "Name of your existing virtual network where you want to deploy this solution."
      }
    },
    "Subnet1": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet that will host the dashboard and other resources."
      }
    },
    "Subnet2": {
      "type": "string",
      "defaultValue": "appGwSubnet",
      "metadata": {
        "description": "Name of the subnet that will host the application gateway."
      }
    },
    "VirtualNetworkCIDRRange": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "CIDR range of the virtual network."
      }
    },
    "Subnet1CIDRRange": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "CIDR range of the first subnet in the virtual network."
      }
    },
    "Subnet2CIDRRange": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "CIDR range of the second subnet in the virtual network."
      }
    },
    "AvailableSubnet2IPAddress": {
      "type": "string",
      "defaultValue": "10.0.1.4",
      "metadata": {
        "description": "Specify an unused IP address from Subnet 2. This IP address serves as the private IP of the Application Gateway."
      }
    },
    "ResourceGroupNameOfVirtualNetwork": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specify the resource group name of the virtual network."
      }
    },
    "DeployNetworkLicenseManagerforMATLAB": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether you want to deploy the Network License Manager for MATLAB."
      }
    },
    "CertificateInputType": {
      "type": "string",
      "metadata": {
        "description": "Select if the Application Gateway will use an SSL certificate from the KeyVault or a base64-encoded PFX certificate string. If you select \"KeyVault\", enter values for \"ManagedIdentityResourceIDForKeyVault\" and \"KeyVaultCertificateSecretID\". If you select \"Base64-encoded PFX Certificate\", enter values for \"Base64EncodedPFXCertificateData\" and \"PasswordForBase64EncodedPFXCertificate\"."
      },
      "allowedValues": ["KeyVault", "Base64-encoded PFX Certificate"],
      "defaultValue": "KeyVault"
    },
    "KeyVaultCertificateSecretID": {
      "type": "securestring",
      "metadata": {
        "description": "Secret ID of SSL certificate present in Key Vault."
      },
      "defaultValue": "" 
    },
    "ManagedIdentityResourceIDForKeyVault": {
      "type": "string",
      "metadata": {
        "description": "Resource ID of the managed identity that has permission to access Key Vault."
      },
      "defaultValue": "" 
    },
    "Base64EncodedPFXCertificateData": {
      "type": "string",
      "metadata": {
        "description": "Base64-encoded SSL certificate string in PFX format."
      },
      "defaultValue": "" 
    },
    "PasswordForBase64EncodedPFXCertificate": {
      "type": "securestring",
      "metadata": {
        "description": "Password for Base64-encoded SSL certificate."
      },
      "defaultValue": "" 
    }
  },
  "variables": {
    "ManagedIdentityResourceIDForKeyVault": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
        "[parameters('ManagedIdentityResourceIDForKeyVault')]": {}
      }
    },
    "AppGatewaySize": "Standard_v2",
    "AppGatewayCount": 1,
    "mpsDNSName": "[concat('mps',uniqueString( resourceGroup().id))]",
    "storageAccountName": "[concat('serverlog',uniqueString( resourceGroup().id))]",
    "storageAccountType": "Standard_LRS",
    "vmssName": "vmss1",
    "namingInfix": "[toLower(substring(concat(variables('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "addressPrefix": "[parameters('VirtualNetworkCIDRRange')]",
    "subnetPrefix": "[parameters('Subnet1CIDRRange')]",
    "virtualNetworkName": "[parameters('VirtualNetworkName')]",
    "subnetName": "[parameters('Subnet1')]",
    "subnetRef": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),variables('subnetName'))]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "ResourceGroupNameOfVirtualNetwork": "[parameters('ResourceGroupNameOfVirtualNetwork')]",
    "virtualNetworkID": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'), 'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "appGwPublicIPAddressName": "[concat(variables('namingInfix'), '-pip')]",
    "appGwName": "[concat(variables('namingInfix'), '-agw')]",
    "appGwPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIPAddressName'))]",
    "appGwSubnetName": "[parameters('Subnet2')]",
    "appGwSubnetPrefix": "[parameters('Subnet2CIDRRange')]",
    "appGwSubnetID": "[resourceId(variables('ResourceGroupNameOfVirtualNetwork'),'Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),variables('appGwSubnetName'))]",
    "mpsHttpPortVar": 9910,
    "mpsFrontEndPort": 445,
    "appGwBePoolName": "[concat(variables('namingInfix'), 'appGwBepool')]",
    "networkSecurityGroupName": "[concat(variables('namingInfix'), '-rdp-nsg')]",
    "publicIPAddressNameMachine": "servermachine-public-ip",
    "redisCacheName": "[concat(variables('namingInfix'), 'redis')]",
    "redisenableNonSslPort": true,
    "redisCacheCapacity": 1,
    "redisCacheFamily": "C",
    "redisCacheSKU": "Standard",
    "appGWprivateIP": "[parameters('AvailableSubnet2IPAddress')]",
    "virtualNetworkNewOrExisting": "[parameters('NewOrExistingVirtualNetwork')]",
    "licservernicName": "servermachine-nic",
    "vmName": "servermachine",
    "publicIPprop1": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameMachine'))]"
    },
    "Platform": "[parameters('Platform')]",
    "WindowsSKUDisk1": "matlab-production-server-admin-vm-22b",
    "WindowsOfferDisk1": "matlab-production-server-payg-master",
    "WindowsSKUDisk2": "matlab-production-server-worker-windows-22b",
    "WindowsOfferDisk2": "matlab-production-server-byol-windows",
    "LinuxSKUDisk1": "[variables('WindowsSKUDisk1')]",
    "LinuxOfferDisk1": "[variables('WindowsOfferDisk1')]",
    "LinuxSKUDisk2": "matlab-production-server-worker-linux-22b",
    "LinuxOfferDisk2": "matlab-production-server-byol-linux",
    "WindowsDisk1Version": "latest",
    "WindowsDisk2Version": "latest",
    "LinuxDisk1Version": "[variables('WindowsDisk1Version')]",
    "LinuxDisk2Version": "latest",
    "windowsScriptURL": "[uri(variables('_artifactsLocation'), concat('scriptScaleSet.ps1', variables('_artifactsLocationSasToken')))]",
    "linuxScriptURL": "[uri(variables('_artifactsLocation'), concat('scriptScaleSet.sh', variables('_artifactsLocationSasToken')))]",
    "masterVMScriptURL": "[uri(variables('_artifactsLocation'), concat('initMasterVM.sh', variables('_artifactsLocationSasToken')))]",
    "commandToExecuteWindows": "[concat('powershell -ExecutionPolicy Unrestricted -File scriptScaleSet.ps1 ' )]",
    "commandToExecuteLinux": "[concat('echo hello ' )]",
    "AppInsights-AppType": "Node.JS",
    "AppInsights-requestSource": "rest",
    "myAppInsightsInstanceName": "logs-apmservice",
    "workspaceName": "logs-workspace",
    "keyoperator": "[resourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
    "owner": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
    "offerType": "BYOL",
    "should-deploy-flex": "[parameters('DeployNetworkLicenseManagerforMATLAB')]",
    "flex-arm-template-link": "https://raw.githubusercontent.com/mathworks-ref-arch/license-manager-for-matlab-on-azure/master/releases/R2022b/azuredeploy-existing-vnet-R2022b.json",
    "flex-parameters": {
      "instanceType": { "value": "Standard_D2s_v3" },
      "clientIPAddress": { "value": "[parameters('Allow connections from')]" },
      "adminUsername": { "value": "[parameters('adminUsername')]" },
      "adminPassword": { "value": "[parameters('adminPassword')]" },
      "virtualNetworkResourceID": {
        "value": "[variables('virtualNetworkID')]"
      },
      "subnetName": { "value": "[variables('subnetName')]" }
    },
    "_artifactsLocation":"https://raw.githubusercontent.com/mathworks-ref-arch/matlab-production-server-on-azure/master/releases/R2022b/scripts/",
    "_artifactsLocationSasToken":""
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "name": "flex-lm-server",
      "apiVersion": "2021-04-01",
      "condition": "[equals(variables('should-deploy-flex'), 'Yes')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/',variables('licservernicName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('flex-arm-template-link')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": "[variables('flex-parameters')]"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "apiVersion": "2022-01-01",
      "location": "[parameters('location')]",
      "tags": {
        "Description": "Network Security Group to control access to resources"
      },
      "properties": {
        "securityRules": [
          {
            "name": "appgw-https",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "[parameters('Allow connections from')]",
              "protocol": "Tcp",
              "destinationPortRange": "443",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('Subnet2CIDRRange')]"
            }
          },
          {
            "name": "nlm-https",
            "properties": {
              "priority": 1001,
              "sourceAddressPrefix": "[parameters('Allow connections from')]",
              "protocol": "Tcp",
              "destinationPortRange": "443",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('Subnet1CIDRRange')]"
            }
          },
          {
            "name": "rdp",
            "properties": {
              "priority": 1002,
              "sourceAddressPrefix": "[parameters('Allow connections from')]",
              "protocol": "Tcp",
              "destinationPortRange": "3389",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "ssh",
            "properties": {
              "priority": 1003,
              "sourceAddressPrefix": "[parameters('Allow connections from')]",
              "protocol": "Tcp",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "appgw-required-by-azure",
            "properties": {
              "priority": 1004,
              "sourceAddressPrefix": "GatewayManager",
              "protocol": "Tcp",
              "destinationPortRange": "65200-65535",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2022-01-01",
      "condition": "[equals(variables('virtualNetworkNewOrExisting'), 'new')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "tags": {
        "Description": "Virtual network for the MATLAB Production Server deployment"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('addressPrefix')]"]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          },
          {
            "name": "[variables('appGwSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('appGwSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressNameMachine')]",
      "apiVersion": "2022-01-01",
      "condition": "[equals(parameters('UsePublicIPAddresses'), 'Yes')]",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "tags": {
        "Description": "Public IP Address of the MATLAB Production Server Dashboard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('licservernicName')]",
      "apiVersion": "2022-01-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameMachine'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/applicationGateways/', variables('appGwName'))]"
      ],
      "tags": {
        "Description": "Network Interface Card (NIC) for the Admin VM"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'), variables('publicIPprop1'), json('null'))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), 'dashboardbackend')]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "apiVersion": "2021-03-01",
      "tags": {
        "Description": "Virtual machine running the Admin Dashboard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/',variables('licservernicName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Cache/Redis/',variables('redisCacheName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/',variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('myAppInsightsInstanceName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "plan": {
        "name": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk1'),  variables('LinuxSKUDisk1'))]",
        "publisher": "mathworks-inc",
        "product": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk1'),  variables('LinuxOfferDisk1'))]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('dashboardVMSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "mathworks-inc",
            "offer": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk1'),  variables('LinuxOfferDisk1'))]",
            "sku": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk1'),  variables('LinuxSKUDisk1'))]",
            "version": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsDisk1Version'),  variables('LinuxDisk1Version'))]"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('licservernicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "extensions",
          "name": "config-app",
          "apiVersion": "2022-03-01",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
          ],
          "tags": {
            "displayName": "config-app"
          },
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "skipDos2Unix": false,
              "timestamp": 123456789
            },
            "protectedSettings": {
              "commandToExecute": "[concat( 'sudo ./initMasterVM.sh ''', variables('storageAccountName'), ''' ''', 'mydbConnection', ''' ''', if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn), concat('https://', variables('appGWprivateIP'), ':444')), ''' ''', reference(variables('subnetRef'), '2022-01-01').addressPrefix, ''' ''', 'Azure', ''' ''', variables('Platform'), ''' ''', reference(resourceId('Microsoft.Insights/components', variables('myAppInsightsInstanceName')), '2020-02-02').InstrumentationKey, ''' ''', resourceGroup().name, ''' ''', subscription().subscriptionId, ''' ''', parameters('adminUsername'), ''' ''', parameters('adminPassword'), ''' ''', variables('redisCacheName'), ''' ''', concat('https://', variables('appGWprivateIP'), ':444'), ''' ''', variables('offerType'), '''' )]",
              "fileUris": ["[variables('masterVMScriptURL')]"]
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appGwPublicIPAddressName')]",
      "apiVersion": "2022-01-01",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('mpsDNSName')]"
        }
      },
      "tags": {
        "Description": "Application Gateway public IP"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "name": "[variables('appGwName')]",
      "apiVersion": "2022-01-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appGwPublicIPAddressName'))]"
      ],
      "identity": "[if(equals(parameters('CertificateInputType'), 'KeyVault'), variables('ManagedIdentityResourceIDForKeyVault'), json('null'))]",
      "tags": {
        "Description": "Application Gateway"
      },
      "properties": {
        "sku": {
          "name": "[variables('AppGatewaySize')]",
          "tier": "Standard_v2",
          "capacity": "[variables('AppGatewayCount')]"
        },
        "sslCertificates": [
          {
            "name": "appGatewayFrontEndSslCert",
            "properties": {
              "keyVaultSecretId": "[if(equals(parameters('CertificateInputType'), 'KeyVault'), parameters('KeyVaultCertificateSecretID'), json('null'))]",
              "data": "[if(equals(parameters('CertificateInputType'), 'Base64-encoded PFX Certificate'), parameters('Base64EncodedPFXCertificateData'), json('null'))]",
              "password": "[if(equals(parameters('CertificateInputType'), 'Base64-encoded PFX Certificate'), parameters('PasswordForBase64EncodedPFXCertificate'), json('null'))]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGwIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appGwSubnetID')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGwFrontendPublicIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appGwPublicIPAddressID')]"
              }
            }
          },
          {
            "name": "appGwFrontendPrivateIP",
            "properties": {
              "privateIPAddress": "[variables('appGWprivateIP')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('appGwSubnetID')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "mpsHttpPort",
            "properties": {
              "Port": "[variables('mpsFrontEndPort')]"
            }
          },
          {
            "name": "mpsHttpPort2",
            "properties": {
              "Port": 444
            }
          },
          {
            "name": "dummyPort",
            "properties": {
              "Port": 449
            }
          },
          {
            "name": "port_445",
            "properties": {
              "port": 443
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('appGwBePoolName')]"
          },
          {
            "name": "dashboardbackend",
            "properties": {}
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGwBackendMPSHttpSettings",
            "properties": {
              "Port": "[variables('mpsHttpPortVar')]",
              "Protocol": "Http",
              "requestTimeout": 300,
              "CookieBasedAffinity": "Enabled",
              "probe": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/probes',variables('appGwName'), 'mpsfileprobe')]"
              }
            }
          },
          {
            "name": "dashboardbackend",
            "properties": {
              "port": 9090,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": true,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 20,
              "probe": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/probes',variables('appGwName'), 'dashboardHealth')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "MPSGwHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGwName') ,'appGwFrontendPublicIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGwName'), 'mpsHttpPort')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'), 'appGatewayFrontEndSslCert')]"
              }
            }
          },
          {
            "name": "MPSGwPrivateHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'mpsHttpPort2')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
              }
            }
          },
          {
            "name": "MPSGwDummyHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'dummyPort')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
              }
            }
          },
          {
            "name": "mainentrypoint",
            "properties": {
              "frontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',variables('appGwName'), 'appGwFrontendPublicIP')]"
              },
              "frontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('appGwName'),'port_445')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('appGwName'),'appGatewayFrontEndSslCert')]"
              },
              "requireServerNameIndication": false
            }
          }
        ],
        "urlPathMaps": [
          {
            "name": "mainpath",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), variables('appGwBePoolName'))]"
              },
              "defaultBackendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',variables('appGwName'), 'appGwBackendMPSHttpSettings')]"
              },
              "pathRules": [
                {
                  "name": "dashboard",
                  "properties": {
                    "paths": ["/dashboard/*", "/dashboard"],
                    "backendAddressPool": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), 'dashboardbackend')]"
                    },
                    "backendHttpSettings": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',variables('appGwName'), 'dashboardbackend')]"
                    }
                  }
                }
              ]
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "mainpathPrivate",
            "properties": {
              "ruleType": "PathBasedRouting",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'MPSGwPrivateHttpListener')]"
              },
              "urlPathMap": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps',variables('appGwName'), 'mainpath')]"
              },
              "priority": 1
            }
          },
          {
            "name": "mainpath",
            "properties": {
              "ruleType": "PathBasedRouting",
              "httpListener": {
                "id": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'),resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'mainentrypoint'),  resourceId('Microsoft.Network/applicationGateways/httpListeners',variables('appGwName'), 'MPSGwDummyHttpListener') )]"
              },
              "urlPathMap": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps',variables('appGwName'), 'mainpath')]"
              },
              "priority": 2
            }
          }
        ],
        "probes": [
          {
            "name": "mpsfileprobe",
            "properties": {
              "protocol": "Http",
              "host": "127.0.0.1",
              "path": "/~files/hello.html",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3
            }
          },
          {
            "name": "dashboardHealth",
            "properties": {
              "protocol": "Http",
              "host": "127.0.0.1",
              "path": "/dashboard/index.html",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('namingInfix')]",
      "apiVersion": "2022-03-01",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/applicationGateways/', variables('appGwName'))]"
      ],
      "tags": {
        "Description": "VM Scale set that controls how many instances are running"
      },
      "sku": {
        "name": "[parameters('Server VM Instance Size')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "plan": {
        "name": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk2'),  variables('LinuxSKUDisk2'))]",
        "publisher": "mathworks-inc",
        "product": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk2'),  variables('LinuxOfferDisk2'))]"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "publisher": "mathworks-inc",
              "offer": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsOfferDisk2'),  variables('LinuxOfferDisk2'))]",
              "sku": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsSKUDisk2'),  variables('LinuxSKUDisk2'))]",
              "version": "[if(equals(variables('Platform'), 'Windows'), variables('WindowsDisk2Version'),  variables('LinuxDisk2Version'))]"
            },
            "osDisk": {
              "createOption": "fromImage",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              }
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "ApplicationGatewayBackendAddressPools": [
                          {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',variables('appGwName'), variables('appGwBePoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(variables('vmssName'), 'SetEnvironmentVar')]",
                "properties": {
                  "publisher": "[if(equals(variables('Platform'), 'Windows'), 'Microsoft.Compute', 'Microsoft.Azure.Extensions')]",
                  "forceUpdateTag": "1",
                  "type": "[if(equals(variables('Platform'), 'Windows'), 'CustomScriptExtension', 'CustomScript')]",
                  "typeHandlerVersion": "[if(equals(variables('Platform'), 'Windows'), '1.9', '2.0')]",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "[if(equals(variables('Platform'), 'Windows'), variables('windowsScriptURL'), variables('linuxScriptURL'))]"
                    ]
                  },
                  "protectedSettings": {
                    "commandToExecute": "[if(equals(variables('Platform'), 'Windows'), variables('commandToExecuteWindows'), variables('commandToExecuteLinux'))]"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-06-01",
      "location": "[parameters('location')]",
      "tags": {
        "Description": "Storage account that stores application and config files"
      },
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('redisCacheName')]",
      "apiVersion": "2020-12-01",
      "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]",
      "tags": {
        "Description": "Azure Cache for Redis to store persistence data"
      },
      "location": "[parameters('location')]",
      "properties": {
        "enableNonSslPort": "[variables('redisenableNonSslPort')]",
        "sku": {
          "capacity": "[variables('redisCacheCapacity')]",
          "family": "[variables('redisCacheFamily')]",
          "name": "[variables('redisCacheSKU')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('workspaceName')]",
      "apiVersion": "2021-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Insights/Components",
      "name": "[variables('myAppInsightsInstanceName')]",
      "apiVersion": "2020-02-02",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ],
      "tags": {
        "Description": "Application Insights instance that stores solution logs"
      },
      "location": "[parameters('location')]",
      "properties": {
        "Application_Type": "[variables('AppInsights-AppType')]",
        "Flow_Type": "Redfield",
        "Request_Source": "[variables('AppInsights-requestSource')]",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[guid(resourceGroup().id, deployment().name,'12')]",
      "apiVersion": "2022-04-01",
      "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('keyoperator')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[guid(resourceGroup().id, deployment().name,'16')]",
      "apiVersion": "2022-04-01",
      "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('keyoperator')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[guid(resourceGroup().id, deployment().name,'22')]",
      "apiVersion": "2022-04-01",
      "condition": "[equals(parameters('CreateAzureRedisCache'), 'Yes')]",
      "scope": "[concat('Microsoft.Cache/Redis', '/', variables('redisCacheName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('owner')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "adminDashboardURL": {
      "value": "[uri(if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn, '/dashboard/admin'), concat('https://', variables('appGWprivateIP'), ':444/dashboard/admin')), '')]",
      "type": "string"
    },
    "managerAndAppAuthorDashboardURL": {
      "value": "[uri(if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn, '/dashboard'), concat('https://', variables('appGWprivateIP'), ':444/dashboard')), '')]",
      "type": "string"
    },
    "networkLicenseManagerURL": {
      "value": "[if(equals(variables('should-deploy-flex'), 'Yes'), reference('flex-lm-server').outputs.NetworkLicenseManagerAddress.value, 'none')]",
      "type": "string"
    },
    "MATLABExecutionEndpoint": {
      "value": "[if(equals(parameters('UsePublicIPAddresses'), 'Yes'), concat('https://', reference(variables('appGwPublicIPAddressName')).dnsSettings.fqdn), concat('https://', variables('appGWprivateIP'),':444'))]",
      "type": "string"
    }
  }
}
